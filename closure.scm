(define (curry2 binary-func p1)
    (lambda (p2)
        (binary-func p1 p2)))
(define foo (curry2 '+ 2))
(foo 3)
(foo 5)

(define (curry3 ternary-func p1)
    (lambda (p2)
        (lambda (p3)
            (ternary-func p1 p2 p3))))
(((curry3 (lambda (x y z) (+ x y z)) 1) 2) 3)

(define (curry4 quaternary-func p1)
    (lambda (p2)
        (lambda (p3)
            (lambda (p4)
                (quaternary-func p1 p2 p3 p4)))))
((((curry4 (lambda (x y z w) (+ x y z w)) 1) 2) 3) 4)

(define (curry5 quinary-func p1)
    (lambda (p2)
        (lambda (p3)
            (lambda (p4)
                (lambda (p5)
                    (quinary-func p1 p2 p3 p4 p5))))))
(((((curry5 (lambda (x y z w v) (+ x y z w v)) 1) 2) 3) 4) 5)
(define add10 ((((curry5 (lambda (x y z w v) (+ x y z w v)) 1) 2) 3) 4))
(add10 10)

(define (not-fn2 func)
    (lambda (x y)
        (not (func x y))))
(define and-not (not-fn2 &&))
(&& #t #f)
(and-not #t #f)
